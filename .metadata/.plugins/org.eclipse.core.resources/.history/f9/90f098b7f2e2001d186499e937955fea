/*
 * stm32f407xx_spi.c
 *
 *  Created on: Apr 9, 2023
 *      Author: Mahdi Kaffel
 */

#include "stm32f407xx_spi.h"

static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
 {
	if ((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
		//16 bit DFF
		//1. Load the data in to the DR
		pSPIHandle->pSPIx->DR = *((uint16_t*) pSPIHandle->pTxBuffer);
		pSPIHandle->TxLen--;
		pSPIHandle->TxLen--;
		(uint16_t*) pSPIHandle->pTxBuffer++;
	} else {
		//8 bit DFF
		pSPIHandle->pSPIx->DR = *(pSPIHandle->pTxBuffer);
		pSPIHandle->TxLen--;
		pSPIHandle->pTxBuffer++;
	}

	if (!pSPIHandle->TxLen) {
		// TxLen = 0 , Close SPI transmission and inform app TX is over
		// this prevents interrupts from setting up TXE flag
		SPI_CloseTransmission(pSPIHandle);
		SPI_ApplicationEvetCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
	}
}

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
 {
	if ((pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
		//16 bit DFF
		//1. Load the data from DR to Rxbuffer address
		*((uint16_t*) pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
		pSPIHandle->RxLen--;
		pSPIHandle->RxLen--;
		(uint16_t*) pSPIHandle->pRxBuffer++;
	} else {
		//8 bit DFF
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
		pSPIHandle->RxLen--;
		pSPIHandle->pRxBuffer++;
	}

	if (!pSPIHandle->RxLen) {
		// TxLen = 0 , Close SPI transmission and inform app TX is over
		SPI_CloseReception(pSPIHandle);
		SPI_ApplicationEvetCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
	}
}

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{

	uint8_t temp ;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
	{
		temp = pSPIHandle->pSPIx->DR;
		temp = pSPIHandle->pSPIx->SR;
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEvetCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
}


/**************************************************************
 * @fn						- SPI_PeriClockControl
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi )
 {
	if (EnorDi == ENABLE) {
		if (pSPIx == SPI1) {
			SPI1_PCLK_EN();
		} else if (pSPIx == SPI2) {
			SPI2_PCLK_EN();
		} else if (pSPIx == SPI3) {
			SPI3_PCLK_EN();
		} else if (pSPIx == SPI4) {
			SPI4_PCLK_EN();
		}
	} else {
		if (pSPIx == SPI1) {
			SPI1_PCLK_DI();
		} else if (pSPIx == SPI2) {
			SPI2_PCLK_DI();
		} else if (pSPIx == SPI3) {
			SPI3_PCLK_DI();
		} else if (pSPIx == SPI4) {
			SPI4_PCLK_DI();
		}
	}

}

/**************************************************************
 * @fn						- SPI_Init
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_Init(SPI_Handle_t *pSPIHandle) {

	// Peripheral Clock Enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	uint32_t tempReg = 0;
	//1 . Configure the mode of SPI
	tempReg |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
	//2 . Configure the bus config
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
		// BIDI Mode should be cleared
		tempReg &= ~(1 << 15);
	} else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
		// BIDI Mode should be set
		tempReg |= (1 << 15);
	} else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_S_RXONLY) {
		// BIDI Mode should be cleared
		tempReg &= ~(1 << 15);
		//RXONLY Bit must be set
		tempReg |= (1 << 10);
	}
	if (pSPIHandle->SPI_Config.SPI_SSM == SPI_SSM_EN) {
		// BIDI Mode should be cleared
		tempReg |= (1 << SPI_CR1_SSM);
	} else {
		tempReg &= ~(1 << SPI_CR1_SSM);
	}
	// 3. Configure the SPI serial clock speed (baud rate)
	if (pSPIHandle->SPI_Config.SPI_SclkSpeed == SPI_SCLK_SPEED_DIV2) {
		tempReg |= pSPIHandle->pSPIx->CR1 << SPI_CR1_BR;
		tempReg |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_SCLK_SPEED_DIV2);

	} else if(pSPIHandle->SPI_Config.SPI_SclkSpeed == SPI_SCLK_SPEED_DIV8) {
		tempReg |= pSPIHandle->pSPIx->CR1 << SPI_CR1_BR;
		tempReg |=(pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_SCLK_SPEED_DIV8);
	} else if(pSPIHandle->SPI_Config.SPI_SclkSpeed == SPI_SCLK_SPEED_DIV16) {
		tempReg |= pSPIHandle->pSPIx->CR1 << SPI_CR1_BR;
		tempReg |=(pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_SCLK_SPEED_DIV16);
	}
	// 4. Configure the DFF
	tempReg |= pSPIHandle->pSPIx->CR1 << SPI_CR1_DFF;
	// 5. Configure the CPOL
	if (pSPIHandle->SPI_Config.SPI_CPOL == SPI_CPOL_HIGH) {
		tempReg |= (1 << SPI_CR1_CPOL);
	} else {
		tempReg &= ~(1 << SPI_CR1_CPOL);
	}
	// 6. Configure the CPHA
	if (pSPIHandle->SPI_Config.SPI_CPHA == SPI_CPHA_HIGH) {
		tempReg |= (1 << SPI_CR1_CPHA);
	} else {
		tempReg &= ~(1 << SPI_CR1_CPHA);
	}

	pSPIHandle->pSPIx->CR1 = tempReg;

}

/**************************************************************
 * @fn						- SPI_DeInit
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if (pSPIx == SPI1) {
		SPI1_REG_RESET();
	} else if (pSPIx == SPI1) {
		SPI1_REG_RESET();
	} else if (pSPIx == SPI2) {
		SPI2_REG_RESET();
	} else if (pSPIx == SPI3) {
		SPI3_REG_RESET();
	} else if (pSPIx == SPI4) {
		SPI4_REG_RESET();
	}
}

/**************************************************************
 * @fn						- SPI_GetFlagStatus
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- This is blocking call

 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

/**************************************************************
 * @fn						- SPI_SendData
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	while (Len > 0) {
		//1 . Wait until TXE is Set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
		//2. Check the DFF bit in CR1
		if( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) )
		{
			//16 bit DFF
			//1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
			Len--;
			Len--;
			(uint16_t*)pTxBuffer++;
		}else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
			Len--;
			pTxBuffer++;
		}

	}
}

/**************************************************************
 * @fn						- SPI_ReceiveData
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
	while (Len > 0) {
		//1 . Wait until RXNE is Set
		while (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET)
			;
		//2. Check the DFF bit in CR1
		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
			//16 bit DFF
			//1. Load the data from DR to Rxbuffer address
			*((uint16_t*) pRxBuffer) = pSPIx->DR;
			Len--;
			Len--;
			(uint16_t*) pRxBuffer++;
		} else {
			//8 bit DFF
			*pRxBuffer = pSPIx->DR;
			Len--;
			pRxBuffer++;
		}

	}
}

/*
 *  IRQ Configuration and ISR handling
 */
/**************************************************************
 * @fn						- SPI_IRQConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi )
{
	if (EnorDi == ENABLE) {
		if (IRQNumber <= 31) {
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);

		} else if (IRQNumber > 31 && IRQNumber < 64) {
			//program ISER1 register
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
		} else if (IRQNumber > 64 && IRQNumber < 96) {
			//program ISER2 register
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
		}
	} else {
		if (IRQNumber <= 31) {
			//program ICER0 register
			*NVIC_ICER0 |= (1 << IRQNumber);

		} else if (IRQNumber > 31 && IRQNumber < 64) {
			//program ICER1 register
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		} else if (IRQNumber > 64 && IRQNumber < 96) {
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}

	}
}

/**************************************************************
 * @fn						- SPI_IRQPriorityConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority )
{
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
}

/**************************************************************
 * @fn						- SPI_IRQHandling
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
	uint8_t temp1, temp2;
	// Check for TXE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_TXE);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);

	if (temp1 && temp2) {
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
	}

	//check for RXNE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);

	if (temp1 && temp2) {
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
	}

	//check for overrun
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_OVR);
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);

	if (temp1 && temp2) {
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
	}

}

/**************************************************************
 * @fn						- SPI_SendDataIT
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
 {
	uint8_t state = pSPIHandle->TxState;

	if (state != SPI_BUSY_IN_TX) {
		//1. Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
		pSPIHandle->TxLen = Len;
		//2. Mark the SPI state as busy in transmission so that no other code take over same SPI
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
	}

	return state;
}

/**************************************************************
 * @fn						- SPI_ReceiveDataIT
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
	uint8_t state = pSPIHandle->RxState;

	if (state != SPI_BUSY_IN_RX) {
		//1. Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
		pSPIHandle->RxLen = Len;
		//2. Mark the SPI state as busy in transmission so that no other code take over same SPI
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
	}

	return state;
}


/*
 *  Other Peripheral Control APIs
 */

/**************************************************************
 * @fn						- SPI_PeripheralControl
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx , uint8_t EnOrDi)
 {
	if (EnOrDi == ENABLE) {
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
/**************************************************************
 * @fn						- SPI_SSIConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIX, uint8_t EnOrDi) {

	if (EnOrDi == ENABLE) {
		pSPIX->CR1 |= (1 << SPI_CR1_SSI);
	} else {
		pSPIX->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
/**************************************************************
 * @fn						- SPI_SSOEConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIX, uint8_t EnOrDi) {

	if (EnOrDi == ENABLE) {
		pSPIX->CR2 |= (1 << SPI_CR2_SSOE);
	} else {
		pSPIX->CR1 &= ~(1 << SPI_CR2_SSOE);
	}
}

/**************************************************************
 * @fn						- SPI_CloseTransmission
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
	pSPIHandle->pTxBuffer = NULL;
	pSPIHandle->TxLen = 0;
	pSPIHandle->TxState = SPI_READY;
}

/**************************************************************
 * @fn						- SPI_CloseReception
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
	pSPIHandle->pRxBuffer = NULL;
	pSPIHandle->RxLen = 0;
	pSPIHandle->RxState = SPI_READY;
}

/**************************************************************
 * @fn						- SPI_ClearOVRFlag
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx)
{
	uint8_t temp;
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void)temp;
}

__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv)
{
	// Weak implementation . The application may override this function

}
