/*
 * lcd.c
 *
 *  Created on: Jun 4, 2023
 *      Author: Mahdi Kaffel
 */

#include "lcd.h"

#define LCD_SLAVE_ADDR		(0x3F << 1)


I2C_Handle_t i2c_pins;

static void lcd_i2c_pin_config();
static void lcd_i2c_config();
static void udelay(uint32_t cnt);
static void mdelay(uint32_t cnt);


void lcd_init(void)
{
	// Init the I2C Pins
	lcd_i2c_pin_config();
	// Initialize the I2C peripheral
	lcd_i2c_config();
	// Enable I2C
	I2C_PeripheralControl(LCD_I2C, ENABLE);

	// 4 bit initialisation
	udelay(50000);  // wait for >40ms
	lcd_send_cmd(0x30);
	udelay(4500);  // wait for >4.1ms
	lcd_send_cmd(0x30);
	udelay(200);  // wait for >100us
	lcd_send_cmd(0x30);
	udelay(200);
	lcd_send_cmd(0x20);  // 4bit mode
	udelay(200);

	// LCD initialization
	lcd_send_cmd(LCD_CMD_4DL_2N_5X8F);
	udelay(1000);
	lcd_send_cmd(LCD_CMDDON_CURON);
	udelay(1000);
	lcd_clear();
	lcd_send_cmd(LCD_CMD_INCAD);
	udelay(2000);

}

static void lcd_i2c_pin_config()
{
	GPIO_Handle_t i2c_sda , i2c_scl;
	//SCL
	i2c_sda.pGPIOx = LCD_I2C_GPIO_PORT;
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C_SCL_PIN;
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = LCD_I2C_PUPD;
	GPIO_Init(&i2c_sda);
	//SDA
	i2c_scl.pGPIOx = LCD_I2C_GPIO_PORT;
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C_SDA_PIN;
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = LCD_I2C_PUPD;
	GPIO_Init(&i2c_scl);
}

static void lcd_i2c_config()
{
	I2C_Handle_t i2c_pins;
	i2c_pins.pI2Cx = LCD_I2C;
	i2c_pins.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
	i2c_pins.I2C_Config.I2C_SclkSpeed = LCD_I2C_SPEED;
	I2C_Init(&i2c_pins);
}

void lcd_send_cmd(uint8_t cmd)
{
	uint8_t data_t[4],data_u , data_l;
	data_u = (cmd & 0xf0);
	data_l = (cmd << 4 ) & 0xf0;
	data_t[0] = data_u|0x0c; // en = 1 , rs = 0
	data_t[1] = data_u|0x08; // en = 0 , rs = 0
	data_t[2] = data_l|0x0c; // en = 1 , rs = 0
	data_t[3] = data_l|0x08 ;// en = 0 , rs = 0
	I2C_MasterSendData(&i2c_pins, data_t, 4, LCD_SLAVE_ADDR , 0);
}

void lcd_send_data(uint8_t data)
{
	uint8_t data_t[4],data_u , data_l;
	data_u = (data & 0xf0);
	data_l = (data << 4) & 0xf0;
	data_t[0] = data_u | 0x0D; // en = 1 , rs = 1
	data_t[1] = data_u | 0x09; // en = 0 , rs = 1
	data_t[2] = data_l | 0x0D; // en = 1 , rs = 1
	data_t[3] = data_l | 0x09; // en = 0 , rs = 1
	I2C_MasterSendData(&i2c_pins, data_t, 4, LCD_SLAVE_ADDR, 0);
}

void lcd_clear(void)
{
	lcd_send_cmd(LCD_CMD_DIS_CLEAR);

	mdelay(2);
}

void lcd_return_home(void)
{
	lcd_send_cmd(LCD_CMD_DIS_RETURN_HOME);

	mdelay(2);
}

void lcd_set_cursor(uint8_t row , uint8_t column)
{
	column--;
	switch (row)
	{
		case 1:
			lcd_send_cmd((column |= 0x80));
			break;
		case 2:
			lcd_send_cmd((column |= 0xC0));
			break;
		default:
			break;
	}
}


void lcd_print_string(char *message)
{
	do
	{
		lcd_send_data(*message++);
	}while(*message != '0');
}

static void mdelay(uint32_t cnt)
{
	for(uint32_t i =0 ; i < (cnt*1000) ; i++);
}

static void udelay(uint32_t cnt)
{
	for(uint32_t i =0 ; i < (cnt*1) ; i++);
}
