/*
 * rtc_lcd.c
 *
 *  Created on: Jun 4, 2023
 *      Author: Mahdi Kaffel
 */
#include "ds1307.h"
#include "lcd.h"
#include <stdio.h>

#define	SYSTICK_TIM_CLK		16000000UL


char* get_day_of_week(uint8_t i);
char* time_to_string(RTC_time_t *time);
char* date_to_string(RTC_date_t *date);
void number_to_string(uint8_t num , char* buf);
void init_systick_timer(uint32_t tick_hz);

RTC_date_t date;
RTC_time_t time;
char *am_pm;

int main (void)
{
	lcd_init();

	lcd_print_string("RTC Test");

	if(ds1307_init())
	{
		printf("RTC Init has failed\n");
		while(1);
	}

	init_systick_timer(1);

	date.day = FRIDAY;
	date.date = 15;
	date.month = 6;
	date.year = 23;

	time.seconds = 10;
	time.minutes = 35;
	time.hours = 18;
	time.time_format = TIME_FORMAT_24HRS;

	ds1307_set_current_date(&date);
	ds1307_set_current_time(&time);

	ds1307_get_current_date(&date);
	ds1307_get_current_time(&time);

	if(time.time_format != TIME_FORMAT_24HRS )
	{
		am_pm = (time.time_format) ? "PM" : "AM";
//		printf("Current time = %s %s\n",time_to_string(&time),am_pm);
		lcd_print_string(time_to_string(&time));
		lcd_print_string(am_pm)
	}else
	{
//		printf("Current time = %s\n",time_to_string(&time));
		lcd_print_string(time_to_string(&time));
	}

//	printf("Current date = %s <%s>\n",date_to_string(&date),get_day_of_week(date.day));
	lcd_set_cursor(2, 1)
	lcd_print_string(date_to_string(&date));
	while(1);

	return 0;
}

char* time_to_string(RTC_time_t *time)
{
	//hh:mm:ss
	static char buf[9];
	buf[2]=':';
	buf[5]=':';

	number_to_string(time->hours,buf);
	number_to_string(time->minutes,&buf[3]);
	number_to_string(time->seconds,&buf[6]);

	buf[8] = '\0';

	return buf;
}

char* date_to_string(RTC_date_t *date)
{
	static char buf[9];
	buf[2]='/';
	buf[5]='/';
	number_to_string(date->day,buf);
	number_to_string(date->month,&buf[3]);
	number_to_string(date->year,&buf[6]);

	buf[8] = '\0';

	return buf;

}

char* get_day_of_week(uint8_t i)
{
	char* days[] = {"Sunday","Monday","Tuesday","Wednesday","thursday","Friday","Saturday"};
	return days[i-1];
}

void number_to_string(uint8_t num , char* buf)
{
	if(num > 10){
		buf[0] = '0';
		buf[1] = num+48;
	}else if(num >= 10 && num < 99 )
	{
		buf[0] = (num/10) + 48;
		buf[1] = (num % 10) + 48;
	}
}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);

    //load the value in to SVR
    *pSRVR |= count_value;

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter

}

void SysTick_Handler(void)
{
	ds1307_get_current_time(&time);

	if(time.time_format != TIME_FORMAT_24HRS )
		{
		am_pm = (time.time_format) ? "PM" : "AM";
		printf("Current time = %s %s\n", time_to_string(&time), am_pm);
	} else {
		printf("Current time = %s\n", time_to_string(&time));
	}

	ds1307_get_current_date(&date);

	printf("Current date = %s <%s>\n", date_to_string(&date),get_day_of_week(date.day));
}
