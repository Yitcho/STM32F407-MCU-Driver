/*
 * stm32f407xx_i2c.c
 *
 *  Created on: Apr 24, 2023
 *      Author: Mahdi Kaffel
 */
#include "stm32f407xx_i2c.h"
/********************** I2C Private variables **************************/
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,126,256,512};
uint16_t APB1_PreScaler[4] = {2,4,8,16};

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
/********************** I2C Private functions **************************/
uint32_t RCC_GetPLLOutputClock()
{
	return 0;
}

uint32_t RCC_GetPCLK1Value(void)
{
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, AHBP, APB1;

	clksrc = (RCC->CFGR >> 2) & 0x3;

	if (clksrc == 0) {
		SystemClk = 16000000;
	} else if (clksrc == 1) {
		SystemClk = 8000000;
	} else if (clksrc == 2) {
		SystemClk = RCC_GetPLLOutputClock();
	}
	// for AHB
	temp = ( RCC->CFGR >> 4) & 0xF;

	if (temp < 8) {
		AHBP = 1;
	} else {
		AHBP = AHB_PreScaler[temp - 8];
	}
	// for APB1
	temp = ( RCC->CFGR >> 10) & 0x7;

	if (temp < 4) {
		APB1 = 1;
	} else {
		APB1 = APB1_PreScaler[temp - 4];
	}

	pclk1 = ( SystemClk/AHBP ) / APB1 ;

	return pclk1;
}

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);

}
/**************************************************************
 * @fn						- I2C_Init
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	uint32_t tempreg = 0;
	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
	pI2CHandle->pI2Cx->CR1 = tempreg;

	//configure the FREQ field of CR2
	tempreg = 0;
	tempreg |= ( RCC_GetPCLK1Value() / 1000000U ) ;
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F) ;

	//Program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
	tempreg |= ( 1 << 14 );
	pI2CHandle->pI2Cx->OAR1 = tempreg;

	//CCR Calculations
	uint16_t ccr_value = 0 ;
	tempreg = 0 ;
	if(pI2CHandle->I2C_Config.I2C_SclkSpeed <= I2C_SCL_SPEED_SM)
	{
		//mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 *  pI2CHandle->I2C_Config.I2C_SclkSpeed);
		tempreg |= (ccr_value & 0xFFF);
	}else
	{
		//mode is fast mode
		tempreg |= 1 << 15 ;
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
		{
			ccr_value = RCC_GetPCLK1Value() / ( 3 *  pI2CHandle->I2C_Config.I2C_SclkSpeed);
		}else
		{
			ccr_value = RCC_GetPCLK1Value() / ( 25 *  pI2CHandle->I2C_Config.I2C_SclkSpeed);
		}
		tempreg |= (ccr_value & 0xFFF);
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
}
/**************************************************************
 * @fn						- I2C_PeriClockControl
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {

	if (EnorDi == ENABLE) {
		if (pI2Cx == I2C1) {
			I2C1_PCLK_EN();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_EN();
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_EN();
		}
	} else {
		if (pI2Cx == I2C1) {
			I2C1_PCLK_DI();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}

}

/**************************************************************
 * @fn						- I2C_DeInit
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{
	if (pI2Cx == I2C1) {
		I2C1_REG_RESET();
	} else if (pI2Cx == I2C1) {
		I2C1_REG_RESET();
	} else if (pI2Cx == I2C2) {
		I2C2_REG_RESET();
	} else if (pI2Cx == I2C3) {
		I2C3_REG_RESET();
	}
}

/*
 *  IRQ Configuration and ISR handling
 */
/**************************************************************
 * @fn						- I2C_IRQConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi )
{
	if (EnorDi == ENABLE) {
		if (IRQNumber <= 31) {
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);

		} else if (IRQNumber > 31 && IRQNumber < 64) {
			//program ISER1 register
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
		} else if (IRQNumber > 64 && IRQNumber < 96) {
			//program ISER2 register
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
		}
	} else {
		if (IRQNumber <= 31) {
			//program ICER0 register
			*NVIC_ICER0 |= (1 << IRQNumber);

		} else if (IRQNumber > 31 && IRQNumber < 64) {
			//program ICER1 register
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		} else if (IRQNumber > 64 && IRQNumber < 96) {
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}

	}
}

/**************************************************************
 * @fn						- I2C_IRQPriorityConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority )
{
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
}

/*
 *  Other Peripheral Control APIs
 */

/**************************************************************
 * @fn						- I2C_PeripheralControl
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx , uint8_t EnOrDi)
 {
	if (EnOrDi == ENABLE) {
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}

/**************************************************************
 * @fn						- I2C_MasterSendData
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer,uint8_t Len, uint8_t SlaveAddr)
{
	// 1. Generate Start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note : Until SB is Cleared SCL Will be stretched (Pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB))
	{

	}
	// 3. Send the address of the slave with r/w bit set to w(0) (total 8 bits)

	// 4. confirm that address phase is completed by checking the ADDR flag in the SR1

	// 5. Clear the ADDR flag according to its software sequence

	// 6. Send the data until Len becomes 0

	// 7. When Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//	Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//	When BTF=1 SCL will be stretched (Pulled to LOW)

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//	Note: Generating STOP , automatically clears the BTF

}

/**************************************************************
 * @fn						- I2C_MasterSendData
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName);

