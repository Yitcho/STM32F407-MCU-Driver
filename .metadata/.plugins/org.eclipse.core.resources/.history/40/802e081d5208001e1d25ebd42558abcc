/*
 * lcd_i2c.c
 *
 *  Created on: Jun 11, 2023
 *      Author: Mahdi Kaffel
 */


/*
 * lcd_i2c.c
 *
 *  Created on: Mar 28, 2020
 *      Author: Mohamed Yaqoob
 */

#include "lcd_i2c.h"
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

/* Library variables */
static I2C_Handle_t lcd_i2cHandle;
#define  LCD_I2C_SLAVE_ADDRESS		0x27U


/* Private functions */
static void lcd_i2c_sendCommand(uint8_t command)
{
  const uint8_t command_0_3 = (0xF0 & (command<<4));
  const uint8_t command_4_7 = (0xF0 & command);
  uint8_t i2cData[4] =
  {
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  I2C_MasterSendData(&lcd_i2cHandle, i2cData, sizeof(i2cData), LCD_I2C_SLAVE_ADDRESS , I2C_ENABLE_SR);
}

static void lcd_i2c_sendData(uint8_t data)
{
  const uint8_t data_0_3 = (0xF0 & (data<<4));
  const uint8_t data_4_7 = (0xF0 & data);
  uint8_t i2cData[4] =
  {
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  I2C_MasterSendData(&lcd_i2cHandle, i2cData, sizeof(i2cData), LCD_I2C_SLAVE_ADDRESS , I2C_ENABLE_SR);
}

static void mdelay(uint32_t cnt)
{
	for(uint32_t i =0 ; i < (cnt*1000) ; i++);
}

static void lcd_i2c_pin_config()
{
	GPIO_Handle_t i2c_sda , i2c_scl;

	memset(&i2c_scl,0,sizeof(i2c_scl));
	memset(&i2c_sda, 0, sizeof(i2c_sda));
	//SCL
	i2c_sda.pGPIOx = LCD_I2C_GPIO_PORT;
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C_SDA_PIN;
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = LCD_I2C_PUPD;
	GPIO_Init(&i2c_sda);
	//SDA
	i2c_scl.pGPIOx = LCD_I2C_GPIO_PORT;
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C_SCL_PIN;
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = LCD_I2C_PUPD;
	GPIO_Init(&i2c_scl);
}

static void lcd_i2c_config()
{
	lcd_i2cHandle.pI2Cx = LCD_I2C;
	lcd_i2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
	lcd_i2cHandle.I2C_Config.I2C_SclkSpeed = LCD_I2C_SPEED;
	I2C_Init(&lcd_i2cHandle);
}
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
void lcd_i2c_init(void)
{

    mdelay(50);
	// Init the I2C Pins
	lcd_i2c_pin_config();
	// Initialize the I2C peripheral
	lcd_i2c_config();
	// Enable I2C
	I2C_PeripheralControl(LCD_I2C, ENABLE);
	//Initialise LCD for 4-bit operation
	//1. Wait at least 15ms
	mdelay(45);
	//2. Attentions sequence
	lcd_i2c_sendCommand(0x30);
	mdelay(5);
	lcd_i2c_sendCommand(0x30);
	mdelay(1);
	lcd_i2c_sendCommand(0x30);
	mdelay(8);
	lcd_i2c_sendCommand(0x20);
	mdelay(8);

	lcd_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	mdelay(1);
	lcd_i2c_sendCommand(LCD_DISPLAYCONTROL);
	mdelay(1);
	lcd_i2c_sendCommand(LCD_CLEARDISPLAY);
	mdelay(3);
	lcd_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
	mdelay(1);
	lcd_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
	mdelay(3);

}

/**
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd_i2c_setCursor(uint8_t row, uint8_t col)
{
  uint8_t maskData;
  maskData = (col)&0x0F;
  if(row==0)
  {
    maskData |= (0x80);
    lcd_i2c_sendCommand(maskData);
  }
  else
  {
    maskData |= (0xc0);
    lcd_i2c_sendCommand(maskData);
  }
}

/**
 * @brief Move to beginning of 1st line
 */
void lcd_i2c_1stLine(void)
{
  lcd_i2c_setCursor(0,0);
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd_i2c_2ndLine(void)
{
  lcd_i2c_setCursor(1,0);
}

/**
 * @brief Select LCD Number of lines mode
 */
void lcd_i2c_TwoLines(void)
{
  lcd_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
}
void lcd_i2c_OneLine(void)
{
  lcd_i2c_sendCommand(LCD_FUNCTIONSET);
}

/**
 * @brief Cursor ON/OFF
 */
void lcd_i2c_cursorShow(bool state)
{
  if(state)
  {
    lcd_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
  }
  else
  {
    lcd_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
  }
}

/**
 * @brief Display clear
 */
void lcd_i2c_clear(void)
{
  lcd_i2c_sendCommand(LCD_CLEARDISPLAY);
  mdelay(3);
}

/**
 * @brief Display ON/OFF, to hide all characters, but not clear
 */
void lcd_i2c_display(bool state)
{
  if(state)
  {
    lcd_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
  }
  else
  {
    lcd_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C);
  }
}

/**
 * @brief Shift content to right
 */
void lcd_i2c_shiftRight(uint8_t offset)
{
  for(uint8_t i=0; i<offset;i++)
  {
    lcd_i2c_sendCommand(0x1c);
  }
}

/**
 * @brief Shift content to left
 */
void lcd_i2c_shiftLeft(uint8_t offset)
{
  for(uint8_t i=0; i<offset;i++)
  {
    lcd_i2c_sendCommand(0x18);
  }
}

/**
 * @brief Print to display
 */
void lcd_i2c_printf(const char* str, ...)
{
  char stringArray[20];
  va_list args;
  va_start(args, str);
  vsprintf(stringArray, str, args);
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
  {
    lcd_i2c_sendData((uint8_t)stringArray[i]);
  }
}
