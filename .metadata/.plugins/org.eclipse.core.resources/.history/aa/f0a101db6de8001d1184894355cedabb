/*
 * stm32f407xx_i2c.c
 *
 *  Created on: Apr 24, 2023
 *      Author: Mahdi Kaffel
 */
#include "stm32f407xx_i2c.h"

/**************************************************************
 * @fn						- I2C_Init
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{

}
/**************************************************************
 * @fn						- I2C_PeriClockControl
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {

	if (EnorDi == ENABLE) {
		if (pI2Cx == I2C1) {
			I2C1_PCLK_EN();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_EN();
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_EN();
		}
	} else {
		if (pI2Cx == I2C1) {
			I2C1_PCLK_DI();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}

}

/**************************************************************
 * @fn						- I2C_DeInit
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{
	if (pI2Cx == I2C1) {
		I2C1_REG_RESET();
	} else if (pI2Cx == I2C1) {
		I2C1_REG_RESET();
	} else if (pI2Cx == I2C2) {
		I2C2_REG_RESET();
	} else if (pI2Cx == I2C3) {
		I2C3_REG_RESET();
	}
}

/*
 *  IRQ Configuration and ISR handling
 */
/**************************************************************
 * @fn						- I2C_IRQConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi )
{
	if (EnorDi == ENABLE) {
		if (IRQNumber <= 31) {
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);

		} else if (IRQNumber > 31 && IRQNumber < 64) {
			//program ISER1 register
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
		} else if (IRQNumber > 64 && IRQNumber < 96) {
			//program ISER2 register
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
		}
	} else {
		if (IRQNumber <= 31) {
			//program ICER0 register
			*NVIC_ICER0 |= (1 << IRQNumber);

		} else if (IRQNumber > 31 && IRQNumber < 64) {
			//program ICER1 register
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		} else if (IRQNumber > 64 && IRQNumber < 96) {
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}

	}
}

/**************************************************************
 * @fn						- I2C_IRQPriorityConfig
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority )
{
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
}

/*
 *  Other Peripheral Control APIs
 */

/**************************************************************
 * @fn						- I2C_PeripheralControl
 *
 * @brief					- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]			    - base address of the GPIO Peripheral
 * @param[in]			    - ENABLE or DISABLE Macros		    -
 *
 * @return				    - None
 *
 * @Note					- None

 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx , uint8_t EnOrDi)
 {
	if (EnOrDi == ENABLE) {
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
