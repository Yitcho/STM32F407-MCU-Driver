
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001250  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800140c  0800140c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800140c  0800140c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800140c  0800140c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000444  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000194a  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000060f  00000000  00000000  0002199e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000158  00000000  00000000  00022150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000651  00000000  00000000  000222a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000227e  00000000  00000000  000228f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b6f7  00000000  00000000  00024b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003026e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000059c  00000000  00000000  000302c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000024 	.word	0x20000024
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080013e0 	.word	0x080013e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000028 	.word	0x20000028
 80001e4:	080013e0 	.word	0x080013e0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
uint8_t rxCmplt = RESET;

/********************************************************/

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(int i=0; i < 500000; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e005      	b.n	8000210 <delay+0x18>
	{
		i++;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
	for(int i=0; i < 500000; i++)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3301      	adds	r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a05      	ldr	r2, [pc, #20]	; (8000228 <delay+0x30>)
 8000214:	4293      	cmp	r3, r2
 8000216:	ddf5      	ble.n	8000204 <delay+0xc>
	}
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	0007a11f 	.word	0x0007a11f

0800022c <USART_Inits>:

void USART_Inits(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	USART1_handle.pUSARTx = USART1;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <USART_Inits+0x3c>)
 8000232:	4a0e      	ldr	r2, [pc, #56]	; (800026c <USART_Inits+0x40>)
 8000234:	601a      	str	r2, [r3, #0]
	USART1_handle.USART_config.USART_Baud = USART_STD_BAUD_115200;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <USART_Inits+0x3c>)
 8000238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800023c:	609a      	str	r2, [r3, #8]
	USART1_handle.USART_config.USART_NoOfStopBits = USART_STOPBITS_1;
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <USART_Inits+0x3c>)
 8000240:	2200      	movs	r2, #0
 8000242:	731a      	strb	r2, [r3, #12]
	USART1_handle.USART_config.USART_Mode = USART_MODE_TXRX;
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <USART_Inits+0x3c>)
 8000246:	2202      	movs	r2, #2
 8000248:	711a      	strb	r2, [r3, #4]
	USART1_handle.USART_config.USART_ParityControl = USART_PARITY_DISABLE;
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <USART_Inits+0x3c>)
 800024c:	2200      	movs	r2, #0
 800024e:	739a      	strb	r2, [r3, #14]
	USART1_handle.USART_config.USART_WordLength = USART_WORDLEN_8BITS;
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <USART_Inits+0x3c>)
 8000252:	2200      	movs	r2, #0
 8000254:	735a      	strb	r2, [r3, #13]
	USART1_handle.USART_config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <USART_Inits+0x3c>)
 8000258:	2200      	movs	r2, #0
 800025a:	73da      	strb	r2, [r3, #15]
	USART_Init(&USART1_handle);
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <USART_Inits+0x3c>)
 800025e:	f000 fd77 	bl	8000d50 <USART_Init>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000040 	.word	0x20000040
 800026c:	40011000 	.word	0x40011000

08000270 <USART1_GPIOInits>:

void USART1_GPIOInits(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t USARTpins;
	USARTpins.pGPIOx = GPIOB ;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <USART1_GPIOInits+0x40>)
 8000278:	607b      	str	r3, [r7, #4]
	USARTpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027a:	2302      	movs	r3, #2
 800027c:	727b      	strb	r3, [r7, #9]
	USARTpins.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800027e:	2307      	movs	r3, #7
 8000280:	737b      	strb	r3, [r7, #13]
	USARTpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
	USARTpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]
	USARTpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800028a:	2301      	movs	r3, #1
 800028c:	72fb      	strb	r3, [r7, #11]
	// TX Pin
	USARTpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800028e:	2306      	movs	r3, #6
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTpins);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f9af 	bl	80005f8 <GPIO_Init>
	// RX pin
	USARTpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800029a:	2307      	movs	r3, #7
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USARTpins);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9a9 	bl	80005f8 <GPIO_Init>
}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40020400 	.word	0x40020400

080002b4 <GPIOA_Inits>:

void GPIOA_Inits(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOA;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <GPIOA_Inits+0x2c>)
 80002bc:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002be:	2300      	movs	r3, #0
 80002c0:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002c2:	2300      	movs	r3, #0
 80002c4:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002c6:	2302      	movs	r3, #2
 80002c8:	72bb      	strb	r3, [r7, #10]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ca:	2300      	movs	r3, #0
 80002cc:	72fb      	strb	r3, [r7, #11]
	GPIO_Init(&GpioButton);
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f991 	bl	80005f8 <GPIO_Init>
}
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40020000 	.word	0x40020000

080002e4 <main>:




int main(void)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]

	GPIOA_Inits();
 80002ee:	f7ff ffe1 	bl	80002b4 <GPIOA_Inits>

	USART1_GPIOInits();
 80002f2:	f7ff ffbd 	bl	8000270 <USART1_GPIOInits>

	USART_Inits();
 80002f6:	f7ff ff99 	bl	800022c <USART_Inits>

	USART_IRQConfig(IRQ_NO_USART1, ENABLE );
 80002fa:	2101      	movs	r1, #1
 80002fc:	2025      	movs	r0, #37	; 0x25
 80002fe:	f000 fc8d 	bl	8000c1c <USART_IRQConfig>

	USART_PeripheralControl(USART1, ENABLE);
 8000302:	2101      	movs	r1, #1
 8000304:	481e      	ldr	r0, [pc, #120]	; (8000380 <main+0x9c>)
 8000306:	f000 fe87 	bl	8001018 <USART_PeripheralControl>

	while (1) {
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800030a:	bf00      	nop
 800030c:	2100      	movs	r1, #0
 800030e:	481d      	ldr	r0, [pc, #116]	; (8000384 <main+0xa0>)
 8000310:	f000 fb12 	bl	8000938 <GPIO_ReadFromInputPin>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f8      	beq.n	800030c <main+0x28>

		delay();
 800031a:	f7ff ff6d 	bl	80001f8 <delay>

		cnt = cnt % 3 ;
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <main+0xa4>)
 8000322:	fba3 1302 	umull	r1, r3, r3, r2
 8000326:	0859      	lsrs	r1, r3, #1
 8000328:	460b      	mov	r3, r1
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	440b      	add	r3, r1
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	607b      	str	r3, [r7, #4]

		while(USART_ReceiveDataIT(&USART1_handle, (uint8_t*)receive_buff, strlen(msg[cnt])) != USART_READY);
 8000332:	bf00      	nop
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <main+0xa8>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff53 	bl	80001e8 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	461a      	mov	r2, r3
 8000346:	4912      	ldr	r1, [pc, #72]	; (8000390 <main+0xac>)
 8000348:	4812      	ldr	r0, [pc, #72]	; (8000394 <main+0xb0>)
 800034a:	f000 fdce 	bl	8000eea <USART_ReceiveDataIT>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d1ef      	bne.n	8000334 <main+0x50>

		USART_SendData(&USART1_handle, (uint8_t*)msg[cnt], strlen(msg[cnt]));
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <main+0xa8>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800035c:	4a0b      	ldr	r2, [pc, #44]	; (800038c <main+0xa8>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff3f 	bl	80001e8 <strlen>
 800036a:	4603      	mov	r3, r0
 800036c:	461a      	mov	r2, r3
 800036e:	4621      	mov	r1, r4
 8000370:	4808      	ldr	r0, [pc, #32]	; (8000394 <main+0xb0>)
 8000372:	f000 fd6c 	bl	8000e4e <USART_SendData>

		//move on to next message indexed in msg[]
		cnt++;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3301      	adds	r3, #1
 800037a:	607b      	str	r3, [r7, #4]
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800037c:	e7c5      	b.n	800030a <main+0x26>
 800037e:	bf00      	nop
 8000380:	40011000 	.word	0x40011000
 8000384:	40020000 	.word	0x40020000
 8000388:	aaaaaaab 	.word	0xaaaaaaab
 800038c:	20000000 	.word	0x20000000
 8000390:	20000064 	.word	0x20000064
 8000394:	20000040 	.word	0x20000040

08000398 <USART1_IRQHandler>:

	return 0;
}

void USART1_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&USART1_handle);
 800039c:	4802      	ldr	r0, [pc, #8]	; (80003a8 <USART1_IRQHandler+0x10>)
 800039e:	f000 fe57 	bl	8001050 <USART_IRQHandling>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000040 	.word	0x20000040

080003ac <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d102      	bne.n	80003c4 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <USART_ApplicationEventCallback+0x24>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	20000464 	.word	0x20000464

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	; (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	; (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000402:	f000 ffc9 	bl	8001398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f7ff ff6d 	bl	80002e4 <main>

0800040a <LoopForever>:

LoopForever:
  b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000418:	08001414 	.word	0x08001414
  ldr r2, =_sbss
 800041c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000420:	20000468 	.word	0x20000468

08000424 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC_IRQHandler>
	...

08000428 <GPIO_PeriClockControl>:
 *
 * @Note					- None

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi )
 {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d162      	bne.n	8000500 <GPIO_PeriClockControl+0xd8>
		if (pGPIOx == GPIOA) {
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a64      	ldr	r2, [pc, #400]	; (80005d0 <GPIO_PeriClockControl+0x1a8>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000442:	4b64      	ldr	r3, [pc, #400]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a63      	ldr	r2, [pc, #396]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
		} else if (pGPIOx == GPIOI) {
			GPIOI_PCLK_DI();
		}
	}

}
 800044e:	e0b9      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a61      	ldr	r2, [pc, #388]	; (80005d8 <GPIO_PeriClockControl+0x1b0>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000458:	4b5e      	ldr	r3, [pc, #376]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a5d      	ldr	r2, [pc, #372]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800045e:	f043 0302 	orr.w	r3, r3, #2
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e0ae      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a5c      	ldr	r2, [pc, #368]	; (80005dc <GPIO_PeriClockControl+0x1b4>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800046e:	4b59      	ldr	r3, [pc, #356]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a58      	ldr	r2, [pc, #352]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000474:	f043 0304 	orr.w	r3, r3, #4
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e0a3      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a58      	ldr	r2, [pc, #352]	; (80005e0 <GPIO_PeriClockControl+0x1b8>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000484:	4b53      	ldr	r3, [pc, #332]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a52      	ldr	r2, [pc, #328]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800048a:	f043 0308 	orr.w	r3, r3, #8
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	e098      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a53      	ldr	r2, [pc, #332]	; (80005e4 <GPIO_PeriClockControl+0x1bc>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800049a:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a4d      	ldr	r2, [pc, #308]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004a0:	f043 0310 	orr.w	r3, r3, #16
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	e08d      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a4f      	ldr	r2, [pc, #316]	; (80005e8 <GPIO_PeriClockControl+0x1c0>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004b0:	4b48      	ldr	r3, [pc, #288]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a47      	ldr	r2, [pc, #284]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004bc:	e082      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a4a      	ldr	r2, [pc, #296]	; (80005ec <GPIO_PeriClockControl+0x1c4>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004c6:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a42      	ldr	r2, [pc, #264]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d2:	e077      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a46      	ldr	r2, [pc, #280]	; (80005f0 <GPIO_PeriClockControl+0x1c8>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004dc:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	e06c      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a41      	ldr	r2, [pc, #260]	; (80005f4 <GPIO_PeriClockControl+0x1cc>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d168      	bne.n	80005c4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80004f2:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a37      	ldr	r2, [pc, #220]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80004f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e061      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a33      	ldr	r2, [pc, #204]	; (80005d0 <GPIO_PeriClockControl+0x1a8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d106      	bne.n	8000516 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a31      	ldr	r2, [pc, #196]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800050e:	f023 0301 	bic.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000514:	e056      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOB) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a2f      	ldr	r2, [pc, #188]	; (80005d8 <GPIO_PeriClockControl+0x1b0>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d106      	bne.n	800052c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000524:	f023 0302 	bic.w	r3, r3, #2
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052a:	e04b      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOC) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a2b      	ldr	r2, [pc, #172]	; (80005dc <GPIO_PeriClockControl+0x1b4>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800053a:	f023 0304 	bic.w	r3, r3, #4
 800053e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000540:	e040      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOD) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <GPIO_PeriClockControl+0x1b8>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000550:	f023 0308 	bic.w	r3, r3, #8
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000556:	e035      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOE) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <GPIO_PeriClockControl+0x1bc>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000566:	f023 0310 	bic.w	r3, r3, #16
 800056a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056c:	e02a      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOF) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <GPIO_PeriClockControl+0x1c0>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d106      	bne.n	8000584 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800057c:	f023 0320 	bic.w	r3, r3, #32
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000582:	e01f      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOG) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a19      	ldr	r2, [pc, #100]	; (80005ec <GPIO_PeriClockControl+0x1c4>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 8000592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000598:	e014      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOH) {
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <GPIO_PeriClockControl+0x1c8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80005a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ae:	e009      	b.n	80005c4 <GPIO_PeriClockControl+0x19c>
		} else if (pGPIOx == GPIOI) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <GPIO_PeriClockControl+0x1cc>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d105      	bne.n	80005c4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <GPIO_PeriClockControl+0x1ac>)
 80005be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020400 	.word	0x40020400
 80005dc:	40020800 	.word	0x40020800
 80005e0:	40020c00 	.word	0x40020c00
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40021400 	.word	0x40021400
 80005ec:	40021800 	.word	0x40021800
 80005f0:	40021c00 	.word	0x40021c00
 80005f4:	40022000 	.word	0x40022000

080005f8 <GPIO_Init>:
 *
 * @Note					- None

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx , ENABLE);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ff0c 	bl	8000428 <GPIO_PeriClockControl>

	//1 . Configure the mode of GPIO Pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	795b      	ldrb	r3, [r3, #5]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d81f      	bhi.n	8000658 <GPIO_Init+0x60>
	{
		// Non Interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	4619      	mov	r1, r3
 8000636:	2303      	movs	r3, #3
 8000638:	408b      	lsls	r3, r1
 800063a:	43db      	mvns	r3, r3
 800063c:	4619      	mov	r1, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	400a      	ands	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6819      	ldr	r1, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	430a      	orrs	r2, r1
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	e0ca      	b.n	80007ee <GPIO_Init+0x1f6>
	}
	else
	{
		// Interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	795b      	ldrb	r3, [r3, #5]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d117      	bne.n	8000690 <GPIO_Init+0x98>
		{
			// Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000660:	4b4a      	ldr	r3, [pc, #296]	; (800078c <GPIO_Init+0x194>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	4611      	mov	r1, r2
 8000670:	4a46      	ldr	r2, [pc, #280]	; (800078c <GPIO_Init+0x194>)
 8000672:	430b      	orrs	r3, r1
 8000674:	60d3      	str	r3, [r2, #12]
			// Clear corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000676:	4b45      	ldr	r3, [pc, #276]	; (800078c <GPIO_Init+0x194>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	7912      	ldrb	r2, [r2, #4]
 800067e:	4611      	mov	r1, r2
 8000680:	2201      	movs	r2, #1
 8000682:	408a      	lsls	r2, r1
 8000684:	43d2      	mvns	r2, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a40      	ldr	r2, [pc, #256]	; (800078c <GPIO_Init+0x194>)
 800068a:	400b      	ands	r3, r1
 800068c:	6093      	str	r3, [r2, #8]
 800068e:	e035      	b.n	80006fc <GPIO_Init+0x104>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	2b05      	cmp	r3, #5
 8000696:	d117      	bne.n	80006c8 <GPIO_Init+0xd0>
		{
			// Configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <GPIO_Init+0x194>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a38      	ldr	r2, [pc, #224]	; (800078c <GPIO_Init+0x194>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6093      	str	r3, [r2, #8]
			// Clear corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <GPIO_Init+0x194>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	7912      	ldrb	r2, [r2, #4]
 80006b6:	4611      	mov	r1, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	408a      	lsls	r2, r1
 80006bc:	43d2      	mvns	r2, r2
 80006be:	4611      	mov	r1, r2
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <GPIO_Init+0x194>)
 80006c2:	400b      	ands	r3, r1
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	e019      	b.n	80006fc <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	2b06      	cmp	r3, #6
 80006ce:	d115      	bne.n	80006fc <GPIO_Init+0x104>
		{
			// configure both RTSR and FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <GPIO_Init+0x194>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	7912      	ldrb	r2, [r2, #4]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	4a2a      	ldr	r2, [pc, #168]	; (800078c <GPIO_Init+0x194>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <GPIO_Init+0x194>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	7912      	ldrb	r2, [r2, #4]
 80006ee:	4611      	mov	r1, r2
 80006f0:	2201      	movs	r2, #1
 80006f2:	408a      	lsls	r2, r1
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <GPIO_Init+0x194>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	6093      	str	r3, [r2, #8]

		}

		// Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	089b      	lsrs	r3, r3, #2
 8000702:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	f003 0303 	and.w	r3, r3, #3
 800070c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <GPIO_Init+0x198>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d04d      	beq.n	80007b4 <GPIO_Init+0x1bc>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <GPIO_Init+0x19c>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d032      	beq.n	8000788 <GPIO_Init+0x190>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <GPIO_Init+0x1a0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d02b      	beq.n	8000784 <GPIO_Init+0x18c>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <GPIO_Init+0x1a4>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d024      	beq.n	8000780 <GPIO_Init+0x188>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <GPIO_Init+0x1a8>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d01d      	beq.n	800077c <GPIO_Init+0x184>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <GPIO_Init+0x1ac>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d016      	beq.n	8000778 <GPIO_Init+0x180>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <GPIO_Init+0x1b0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d00f      	beq.n	8000774 <GPIO_Init+0x17c>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <GPIO_Init+0x1b4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d008      	beq.n	8000770 <GPIO_Init+0x178>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <GPIO_Init+0x1b8>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d101      	bne.n	800076c <GPIO_Init+0x174>
 8000768:	2308      	movs	r3, #8
 800076a:	e024      	b.n	80007b6 <GPIO_Init+0x1be>
 800076c:	2300      	movs	r3, #0
 800076e:	e022      	b.n	80007b6 <GPIO_Init+0x1be>
 8000770:	2307      	movs	r3, #7
 8000772:	e020      	b.n	80007b6 <GPIO_Init+0x1be>
 8000774:	2306      	movs	r3, #6
 8000776:	e01e      	b.n	80007b6 <GPIO_Init+0x1be>
 8000778:	2305      	movs	r3, #5
 800077a:	e01c      	b.n	80007b6 <GPIO_Init+0x1be>
 800077c:	2304      	movs	r3, #4
 800077e:	e01a      	b.n	80007b6 <GPIO_Init+0x1be>
 8000780:	2303      	movs	r3, #3
 8000782:	e018      	b.n	80007b6 <GPIO_Init+0x1be>
 8000784:	2302      	movs	r3, #2
 8000786:	e016      	b.n	80007b6 <GPIO_Init+0x1be>
 8000788:	2301      	movs	r3, #1
 800078a:	e014      	b.n	80007b6 <GPIO_Init+0x1be>
 800078c:	40013c00 	.word	0x40013c00
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40021400 	.word	0x40021400
 80007a8:	40021800 	.word	0x40021800
 80007ac:	40021c00 	.word	0x40021c00
 80007b0:	40022000 	.word	0x40022000
 80007b4:	2300      	movs	r3, #0
 80007b6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80007b8:	4b5c      	ldr	r3, [pc, #368]	; (800092c <GPIO_Init+0x334>)
 80007ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007bc:	4a5b      	ldr	r2, [pc, #364]	; (800092c <GPIO_Init+0x334>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80007c4:	7c7a      	ldrb	r2, [r7, #17]
 80007c6:	7cbb      	ldrb	r3, [r7, #18]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	fa02 f103 	lsl.w	r1, r2, r3
 80007ce:	4a58      	ldr	r2, [pc, #352]	; (8000930 <GPIO_Init+0x338>)
 80007d0:	7cfb      	ldrb	r3, [r7, #19]
 80007d2:	3302      	adds	r3, #2
 80007d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// Enable EXTI Interrupt delivery Using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d8:	4b56      	ldr	r3, [pc, #344]	; (8000934 <GPIO_Init+0x33c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7912      	ldrb	r2, [r2, #4]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a52      	ldr	r2, [pc, #328]	; (8000934 <GPIO_Init+0x33c>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6013      	str	r3, [r2, #0]


	}
	temp = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
	//2 . Configure the speed of GPIO Pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	799b      	ldrb	r3, [r3, #6]
 80007f6:	461a      	mov	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	4619      	mov	r1, r3
 8000810:	2303      	movs	r3, #3
 8000812:	408b      	lsls	r3, r1
 8000814:	43db      	mvns	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	400a      	ands	r2, r1
 800081e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6899      	ldr	r1, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	430a      	orrs	r2, r1
 800082e:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	//3 . Configure the Pull Up and Pull Down Settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	79db      	ldrb	r3, [r3, #7]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	68da      	ldr	r2, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	4619      	mov	r1, r3
 8000852:	2303      	movs	r3, #3
 8000854:	408b      	lsls	r3, r1
 8000856:	43db      	mvns	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	400a      	ands	r2, r1
 8000860:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68d9      	ldr	r1, [r3, #12]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	430a      	orrs	r2, r1
 8000870:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
	//4 . Configure the Output Type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7a1b      	ldrb	r3, [r3, #8]
 800087a:	461a      	mov	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	4619      	mov	r1, r3
 8000892:	2301      	movs	r3, #1
 8000894:	408b      	lsls	r3, r1
 8000896:	43db      	mvns	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	400a      	ands	r2, r1
 80008a0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6859      	ldr	r1, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
	//5 . Configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d832      	bhi.n	8000924 <GPIO_Init+0x32c>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xf << (4 * temp2));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	3208      	adds	r2, #8
 80008da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	210f      	movs	r1, #15
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	4619      	mov	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4011      	ands	r1, r2
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	3208      	adds	r2, #8
 80008f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	3208      	adds	r2, #8
 8000902:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7a5b      	ldrb	r3, [r3, #9]
 800090a:	4619      	mov	r1, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	4619      	mov	r1, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4311      	orrs	r1, r2
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	3208      	adds	r2, #8
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40013800 	.word	0x40013800
 8000934:	40013c00 	.word	0x40013c00

08000938 <GPIO_ReadFromInputPin>:
 *
 * @Note					- None

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	691a      	ldr	r2, [r3, #16]
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	fa22 f303 	lsr.w	r3, r2, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
	return value;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <RCC_GetPLLOutputClock>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,126,256,512};
uint16_t APB1_PreScaler[4] = {2,4,8,16};


uint32_t RCC_GetPLLOutputClock()
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, AHBP, APB1;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <RCC_GetPCLK1Value+0xa0>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0) {
 8000988:	7a7b      	ldrb	r3, [r7, #9]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d102      	bne.n	8000994 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <RCC_GetPCLK1Value+0xa4>)
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	e00b      	b.n	80009ac <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 1) {
 8000994:	7a7b      	ldrb	r3, [r7, #9]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d102      	bne.n	80009a0 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <RCC_GetPCLK1Value+0xa8>)
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e005      	b.n	80009ac <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 2) {
 80009a0:	7a7b      	ldrb	r3, [r7, #9]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d102      	bne.n	80009ac <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80009a6:	f7ff ffdd 	bl	8000964 <RCC_GetPLLOutputClock>
 80009aa:	60f8      	str	r0, [r7, #12]
	}
	// for AHB
	temp = ( RCC->CFGR >> 4) & 0xF;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <RCC_GetPCLK1Value+0xa0>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 030f 	and.w	r3, r3, #15
 80009b8:	723b      	strb	r3, [r7, #8]

	if (temp < 8) {
 80009ba:	7a3b      	ldrb	r3, [r7, #8]
 80009bc:	2b07      	cmp	r3, #7
 80009be:	d802      	bhi.n	80009c6 <RCC_GetPCLK1Value+0x52>
		AHBP = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	72fb      	strb	r3, [r7, #11]
 80009c4:	e005      	b.n	80009d2 <RCC_GetPCLK1Value+0x5e>
	} else {
		AHBP = AHB_PreScaler[temp - 8];
 80009c6:	7a3b      	ldrb	r3, [r7, #8]
 80009c8:	3b08      	subs	r3, #8
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <RCC_GetPCLK1Value+0xac>)
 80009cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d0:	72fb      	strb	r3, [r7, #11]
	}
	// for APB1
	temp = ( RCC->CFGR >> 10) & 0x7;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <RCC_GetPCLK1Value+0xa0>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	0a9b      	lsrs	r3, r3, #10
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	723b      	strb	r3, [r7, #8]

	if (temp < 4) {
 80009e0:	7a3b      	ldrb	r3, [r7, #8]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d802      	bhi.n	80009ec <RCC_GetPCLK1Value+0x78>
		APB1 = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	72bb      	strb	r3, [r7, #10]
 80009ea:	e005      	b.n	80009f8 <RCC_GetPCLK1Value+0x84>
	} else {
		APB1 = APB1_PreScaler[temp - 4];
 80009ec:	7a3b      	ldrb	r3, [r7, #8]
 80009ee:	3b04      	subs	r3, #4
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <RCC_GetPCLK1Value+0xb0>)
 80009f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f6:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / AHBP) / APB1;
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a00:	7abb      	ldrb	r3, [r7, #10]
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	00f42400 	.word	0x00f42400
 8000a1c:	007a1200 	.word	0x007a1200
 8000a20:	2000000c 	.word	0x2000000c
 8000a24:	2000001c 	.word	0x2000001c

08000a28 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;

	uint8_t clksrc, temp, AHBP, APB2;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <RCC_GetPCLK2Value+0xa0>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0) {
 8000a3c:	7a7b      	ldrb	r3, [r7, #9]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <RCC_GetPCLK2Value+0x20>
		SystemClk = 16000000;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <RCC_GetPCLK2Value+0xa4>)
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e00b      	b.n	8000a60 <RCC_GetPCLK2Value+0x38>
	} else if (clksrc == 1) {
 8000a48:	7a7b      	ldrb	r3, [r7, #9]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d102      	bne.n	8000a54 <RCC_GetPCLK2Value+0x2c>
		SystemClk = 8000000;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <RCC_GetPCLK2Value+0xa8>)
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e005      	b.n	8000a60 <RCC_GetPCLK2Value+0x38>
	} else if (clksrc == 2) {
 8000a54:	7a7b      	ldrb	r3, [r7, #9]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d102      	bne.n	8000a60 <RCC_GetPCLK2Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000a5a:	f7ff ff83 	bl	8000964 <RCC_GetPLLOutputClock>
 8000a5e:	60f8      	str	r0, [r7, #12]
	}
	// for AHB
	temp = ( RCC->CFGR >> 4) & 0xF;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <RCC_GetPCLK2Value+0xa0>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	091b      	lsrs	r3, r3, #4
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	723b      	strb	r3, [r7, #8]

	if (temp < 8) {
 8000a6e:	7a3b      	ldrb	r3, [r7, #8]
 8000a70:	2b07      	cmp	r3, #7
 8000a72:	d802      	bhi.n	8000a7a <RCC_GetPCLK2Value+0x52>
		AHBP = 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	72fb      	strb	r3, [r7, #11]
 8000a78:	e005      	b.n	8000a86 <RCC_GetPCLK2Value+0x5e>
	} else {
		AHBP = AHB_PreScaler[temp - 8];
 8000a7a:	7a3b      	ldrb	r3, [r7, #8]
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <RCC_GetPCLK2Value+0xac>)
 8000a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a84:	72fb      	strb	r3, [r7, #11]
	}

	// for APB2
		temp = ( RCC->CFGR >> 13) & 0x7;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <RCC_GetPCLK2Value+0xa0>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	0b5b      	lsrs	r3, r3, #13
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	723b      	strb	r3, [r7, #8]

		if (temp < 4) {
 8000a94:	7a3b      	ldrb	r3, [r7, #8]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d802      	bhi.n	8000aa0 <RCC_GetPCLK2Value+0x78>
			APB2 = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	72bb      	strb	r3, [r7, #10]
 8000a9e:	e005      	b.n	8000aac <RCC_GetPCLK2Value+0x84>
		} else {
			APB2 = APB2_PreScaler[temp - 4];
 8000aa0:	7a3b      	ldrb	r3, [r7, #8]
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <RCC_GetPCLK2Value+0xb0>)
 8000aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aaa:	72bb      	strb	r3, [r7, #10]
		}
	pclk2 = (SystemClk / AHBP) / APB2;
 8000aac:	7afb      	ldrb	r3, [r7, #11]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ab4:	7abb      	ldrb	r3, [r7, #10]
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	00f42400 	.word	0x00f42400
 8000ad0:	007a1200 	.word	0x007a1200
 8000ad4:	2000000c 	.word	0x2000000c
 8000ad8:	20000004 	.word	0x20000004

08000adc <USART_PeriClockControl>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi )
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d141      	bne.n	8000b72 <USART_PeriClockControl+0x96>
		if (pUSARTx == USART1) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a43      	ldr	r2, [pc, #268]	; (8000c00 <USART_PeriClockControl+0x124>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d106      	bne.n	8000b04 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000af6:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a42      	ldr	r2, [pc, #264]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
		} else if (pUSARTx == USART6) {
			USART6_PCLK_DI();
		}
	}

}
 8000b02:	e077      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART2) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a40      	ldr	r2, [pc, #256]	; (8000c08 <USART_PeriClockControl+0x12c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d106      	bne.n	8000b1a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000b0c:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a3c      	ldr	r2, [pc, #240]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b18:	e06c      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART3) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a3b      	ldr	r2, [pc, #236]	; (8000c0c <USART_PeriClockControl+0x130>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d106      	bne.n	8000b30 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2e:	e061      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART4) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a37      	ldr	r2, [pc, #220]	; (8000c10 <USART_PeriClockControl+0x134>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d106      	bne.n	8000b46 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000b38:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b44:	e056      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART5) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <USART_PeriClockControl+0x138>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d106      	bne.n	8000b5c <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a2c      	ldr	r2, [pc, #176]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b5a:	e04b      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART6) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <USART_PeriClockControl+0x13c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d147      	bne.n	8000bf4 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b6a:	f043 0320 	orr.w	r3, r3, #32
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b70:	e040      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <USART_PeriClockControl+0x124>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d106      	bne.n	8000b88 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b80:	f023 0310 	bic.w	r3, r3, #16
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b86:	e035      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART2) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <USART_PeriClockControl+0x12c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d106      	bne.n	8000b9e <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000b96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b9c:	e02a      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART3) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <USART_PeriClockControl+0x130>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d106      	bne.n	8000bb4 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bb2:	e01f      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART4) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <USART_PeriClockControl+0x134>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d106      	bne.n	8000bca <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000bc2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bc8:	e014      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == UART5) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <USART_PeriClockControl+0x138>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d106      	bne.n	8000be0 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000bd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bde:	e009      	b.n	8000bf4 <USART_PeriClockControl+0x118>
		} else if (pUSARTx == USART6) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <USART_PeriClockControl+0x13c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d105      	bne.n	8000bf4 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <USART_PeriClockControl+0x128>)
 8000bee:	f023 0320 	bic.w	r3, r3, #32
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40004800 	.word	0x40004800
 8000c10:	40004c00 	.word	0x40004c00
 8000c14:	40005000 	.word	0x40005000
 8000c18:	40011400 	.word	0x40011400

08000c1c <USART_IRQConfig>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi )
 {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE) {
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d133      	bne.n	8000c9a <USART_IRQConfig+0x7e>
		if (IRQNumber <= 31) {
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b1f      	cmp	r3, #31
 8000c36:	d80a      	bhi.n	8000c4e <USART_IRQConfig+0x32>
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <USART_IRQConfig+0xf4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	4611      	mov	r1, r2
 8000c46:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <USART_IRQConfig+0xf4>)
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}

	}
}
 8000c4c:	e059      	b.n	8000d02 <USART_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b1f      	cmp	r3, #31
 8000c52:	d90f      	bls.n	8000c74 <USART_IRQConfig+0x58>
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b3f      	cmp	r3, #63	; 0x3f
 8000c58:	d80c      	bhi.n	8000c74 <USART_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <USART_IRQConfig+0xf8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	f002 021f 	and.w	r2, r2, #31
 8000c64:	2101      	movs	r1, #1
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <USART_IRQConfig+0xf8>)
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e046      	b.n	8000d02 <USART_IRQConfig+0xe6>
		} else if (IRQNumber > 64 && IRQNumber < 96) {
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b40      	cmp	r3, #64	; 0x40
 8000c78:	d943      	bls.n	8000d02 <USART_IRQConfig+0xe6>
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c7e:	d840      	bhi.n	8000d02 <USART_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <USART_IRQConfig+0xfc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	4611      	mov	r1, r2
 8000c92:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <USART_IRQConfig+0xfc>)
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	e033      	b.n	8000d02 <USART_IRQConfig+0xe6>
		if (IRQNumber <= 31) {
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b1f      	cmp	r3, #31
 8000c9e:	d80a      	bhi.n	8000cb6 <USART_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <USART_IRQConfig+0x100>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	4611      	mov	r1, r2
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <USART_IRQConfig+0x100>)
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	e025      	b.n	8000d02 <USART_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b1f      	cmp	r3, #31
 8000cba:	d90f      	bls.n	8000cdc <USART_IRQConfig+0xc0>
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc0:	d80c      	bhi.n	8000cdc <USART_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <USART_IRQConfig+0x104>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	f002 021f 	and.w	r2, r2, #31
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <USART_IRQConfig+0x104>)
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e012      	b.n	8000d02 <USART_IRQConfig+0xe6>
		} else if (IRQNumber > 64 && IRQNumber < 96) {
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b40      	cmp	r3, #64	; 0x40
 8000ce0:	d90f      	bls.n	8000d02 <USART_IRQConfig+0xe6>
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ce6:	d80c      	bhi.n	8000d02 <USART_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <USART_IRQConfig+0x108>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <USART_IRQConfig+0x108>)
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	e7ff      	b.n	8000d02 <USART_IRQConfig+0xe6>
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000e104 	.word	0xe000e104
 8000d18:	e000e108 	.word	0xe000e108
 8000d1c:	e000e180 	.word	0xe000e180
 8000d20:	e000e184 	.word	0xe000e184
 8000d24:	e000e188 	.word	0xe000e188

08000d28 <USART_GetFlagStatus>:
	uint8_t iprx_section = IRQNumber % 4;
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
}

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t FlagName) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	if (pUSARTx->SR & FlagName) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]

	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff feba 	bl	8000adc <USART_PeriClockControl>


	/******************************** Configuration of CR1******************************************/

	if(pUSARTHandle->USART_config.USART_Mode == USART_MODE_ONLY_RX)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	791b      	ldrb	r3, [r3, #4]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d104      	bne.n	8000d7a <USART_Init+0x2a>
	{
		tempreg |= (1 << USART_CR1_RE);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e010      	b.n	8000d9c <USART_Init+0x4c>
	}else if(pUSARTHandle->USART_config.USART_Mode == USART_MODE_ONLY_TX)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d104      	bne.n	8000d8c <USART_Init+0x3c>
	{
		tempreg |= (1 << USART_CR1_TE);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e007      	b.n	8000d9c <USART_Init+0x4c>
	}else if(pUSARTHandle->USART_config.USART_Mode == USART_MODE_TXRX)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d103      	bne.n	8000d9c <USART_Init+0x4c>
	{
		tempreg |= ((1 << USART_CR1_TE) | (1 << USART_CR1_RE));
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f043 030c 	orr.w	r3, r3, #12
 8000d9a:	60fb      	str	r3, [r7, #12]
	}

	tempreg |= pUSARTHandle->USART_config.USART_WordLength << USART_CR1_M;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7b5b      	ldrb	r3, [r3, #13]
 8000da0:	031b      	lsls	r3, r3, #12
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]

	if(pUSARTHandle->USART_config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7b9b      	ldrb	r3, [r3, #14]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d104      	bne.n	8000dbc <USART_Init+0x6c>
	{
		tempreg |= (1 << USART_CR1_PCE);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e00b      	b.n	8000dd4 <USART_Init+0x84>
	}else if(pUSARTHandle->USART_config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7b9b      	ldrb	r3, [r3, #14]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d107      	bne.n	8000dd4 <USART_Init+0x84>
	{
		tempreg |= (1 << USART_CR1_PCE);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	60fb      	str	r3, [r7, #12]

		tempreg |= (1 << USART_CR1_PS);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	60da      	str	r2, [r3, #12]
	/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_config.USART_NoOfStopBits << USART_CR2_STOP;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7b1b      	ldrb	r3, [r3, #12]
 8000de4:	031b      	lsls	r3, r3, #12
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/
	tempreg=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]

	if(pUSARTHandle->USART_config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7bdb      	ldrb	r3, [r3, #15]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d104      	bne.n	8000e0c <USART_Init+0xbc>
	{
		tempreg |= (1 << USART_CR3_CTSE);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	e010      	b.n	8000e2e <USART_Init+0xde>

	}else if(pUSARTHandle->USART_config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7bdb      	ldrb	r3, [r3, #15]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d104      	bne.n	8000e1e <USART_Init+0xce>
	{
		tempreg |= (1 << USART_CR3_RTSE);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e007      	b.n	8000e2e <USART_Init+0xde>
	}else if(pUSARTHandle->USART_config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7bdb      	ldrb	r3, [r3, #15]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d103      	bne.n	8000e2e <USART_Init+0xde>
	{
		tempreg |= ( (1 << USART_CR3_RTSE) | (1 << USART_CR3_CTSE) );
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e2c:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR******************************************/
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_config.USART_Baud);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4610      	mov	r0, r2
 8000e42:	f000 f877 	bl	8000f34 <USART_SetBaudRate>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len ; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e031      	b.n	8000ec4 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000e60:	bf00      	nop
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <USART_GetFlagStatus>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f6      	beq.n	8000e62 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_config.USART_WordLength == USART_WORDLEN_9BITS)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	7b5b      	ldrb	r3, [r3, #13]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d118      	bne.n	8000eae <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e8e:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	7b9b      	ldrb	r3, [r3, #14]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d106      	bne.n	8000ea6 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	e00b      	b.n	8000ebe <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	e007      	b.n	8000ebe <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len ; i++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d3c9      	bcc.n	8000e60 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000ecc:	bf00      	nop
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff27 	bl	8000d28 <USART_GetFlagStatus>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f6      	beq.n	8000ece <USART_SendData+0x80>
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <USART_ReceiveDataIT>:
 *
 * @Note              - Resolve all the TODOs

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b087      	sub	sp, #28
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->TxRxState;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	7c1b      	ldrb	r3, [r3, #16]
 8000efa:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d010      	beq.n	8000f24 <USART_ReceiveDataIT+0x3a>
	{
		pUSARTHandle->RxLen = Len;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	619a      	str	r2, [r3, #24]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	621a      	str	r2, [r3, #32]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2201      	movs	r2, #1
 8000f12:	745a      	strb	r2, [r3, #17]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->DR |= (1 << USART_CR1_RXNEIE);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0220 	orr.w	r2, r2, #32
 8000f22:	605a      	str	r2, [r3, #4]

	}

	return rxstate;
 8000f24:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f26:	4618      	mov	r0, r3
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if (pUSARTx == USART1 || pUSARTx == USART6) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a31      	ldr	r2, [pc, #196]	; (800100c <USART_SetBaudRate+0xd8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d003      	beq.n	8000f52 <USART_SetBaudRate+0x1e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a30      	ldr	r2, [pc, #192]	; (8001010 <USART_SetBaudRate+0xdc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d103      	bne.n	8000f5a <USART_SetBaudRate+0x26>
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8000f52:	f7ff fd69 	bl	8000a28 <RCC_GetPCLK2Value>
 8000f56:	61f8      	str	r0, [r7, #28]
 8000f58:	e002      	b.n	8000f60 <USART_SetBaudRate+0x2c>
	} else {
		PCLKx = RCC_GetPCLK1Value();
 8000f5a:	f7ff fd0b 	bl	8000974 <RCC_GetPCLK1Value>
 8000f5e:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if (pUSARTx->CR1 & (1 << USART_CR1_OVER8)) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <USART_SetBaudRate+0x50>
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	009a      	lsls	r2, r3, #2
 8000f76:	441a      	add	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	e00a      	b.n	8000f9a <USART_SetBaudRate+0x66>
	} else {
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009a      	lsls	r2, r3, #2
 8000f8e:	441a      	add	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f98:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv / 100;
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <USART_SetBaudRate+0xe0>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2264      	movs	r2, #100	; 0x64
 8000fb4:	fb02 f303 	mul.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if (pUSARTx->CR1 & (1 << USART_CR1_OVER8)) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <USART_SetBaudRate+0xac>
		//OVER8 = 1 , over sampling by 8
		F_part = (((F_part * 8) + 50) / 100) & ((uint8_t) 0x07);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	3332      	adds	r3, #50	; 0x32
 8000fd0:	4a10      	ldr	r2, [pc, #64]	; (8001014 <USART_SetBaudRate+0xe0>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e009      	b.n	8000ff4 <USART_SetBaudRate+0xc0>

	} else {
		//over sampling by 16
		F_part = (((F_part * 16) + 50) / 100) & ((uint8_t) 0x0F);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	3332      	adds	r3, #50	; 0x32
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <USART_SetBaudRate+0xe0>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	609a      	str	r2, [r3, #8]
}
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40011000 	.word	0x40011000
 8001010:	40011400 	.word	0x40011400
 8001014:	51eb851f 	.word	0x51eb851f

08001018 <USART_PeripheralControl>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx , uint8_t EnOrDi)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d106      	bne.n	8001038 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8001036:	e005      	b.n	8001044 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60da      	str	r2, [r3, #12]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <USART_IRQHandling>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

	/*************************Check for TC flag ********************************************/

	//Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC );
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001062:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->SR & (1 << USART_CR1_TCIE);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106e:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2) {
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d025      	beq.n	80010c2 <USART_IRQHandling+0x72>
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d022      	beq.n	80010c2 <USART_IRQHandling+0x72>
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if (pUSARTHandle->TxBusyState == USART_BUSY_IN_TX) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7c9b      	ldrb	r3, [r3, #18]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d11e      	bne.n	80010c2 <USART_IRQHandling+0x72>
			//Check the TxLen . If it is zero then close the data transmission
			if (!pUSARTHandle->TxLen) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d11a      	bne.n	80010c2 <USART_IRQHandling+0x72>
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~(1 << USART_FLAG_TC);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	601a      	str	r2, [r3, #0]
				//Implement the code to clear the TCIE control bit
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TCIE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010a6:	60da      	str	r2, [r3, #12]
				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	749a      	strb	r2, [r3, #18]
				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 80010ba:	2100      	movs	r1, #0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff f975 	bl	80003ac <USART_ApplicationEventCallback>
	}

	/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TXE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010cc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d8:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2) {
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d054      	beq.n	800118a <USART_IRQHandling+0x13a>
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d051      	beq.n	800118a <USART_IRQHandling+0x13a>
		//this interrupt is because of TXE

		if (pUSARTHandle->TxBusyState == USART_BUSY_IN_TX) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7c9b      	ldrb	r3, [r3, #18]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d14d      	bne.n	800118a <USART_IRQHandling+0x13a>
			//Keep sending data until Txlen reaches to zero
			if (pUSARTHandle->TxLen > 0) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d03d      	beq.n	8001172 <USART_IRQHandling+0x122>
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if (pUSARTHandle->USART_config.USART_WordLength== USART_WORDLEN_9BITS) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7b5b      	ldrb	r3, [r3, #13]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d129      	bne.n	8001152 <USART_IRQHandling+0x102>
					//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*)pUSARTHandle->pTxBuffer;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	60fb      	str	r3, [r7, #12]

					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t) 0x01FF);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001112:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if (pUSARTHandle->USART_config.USART_ParityControl == USART_PARITY_DISABLE) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7b9b      	ldrb	r3, [r3, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10f      	bne.n	800113c <USART_IRQHandling+0xec>
						//No parity is used in this transfer , so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	61da      	str	r2, [r3, #28]
						pUSARTHandle->pTxBuffer++;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	61da      	str	r2, [r3, #28]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen-=2;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	1e9a      	subs	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	e01a      	b.n	8001172 <USART_IRQHandling+0x122>
					} else {
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	61da      	str	r2, [r3, #28]
						//Implement the code to decrement the length
						pUSARTHandle->TxLen-=1;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	e00f      	b.n	8001172 <USART_IRQHandling+0x122>
					}
				} else {
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer & (uint8_t) 0xFF);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	61da      	str	r2, [r3, #28]

					//Implement the code to decrement the length
					pUSARTHandle->TxLen-=1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	615a      	str	r2, [r3, #20]
				}

			}
			if (pUSARTHandle->TxLen == 0) {
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d107      	bne.n	800118a <USART_IRQHandling+0x13a>
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001188:	60da      	str	r2, [r3, #12]
		}
	}

	/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_RXNE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0320 	and.w	r3, r3, #32
 8001194:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_RXNEIE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2) {
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d071      	beq.n	800128c <USART_IRQHandling+0x23c>
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d06e      	beq.n	800128c <USART_IRQHandling+0x23c>
		//this interrupt is because of rxne
		//this interrupt is because of txe
		if (pUSARTHandle->RxBusyState == USART_BUSY_IN_RX) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d16a      	bne.n	800128c <USART_IRQHandling+0x23c>
			//TXE is set so send data
			if (pUSARTHandle->RxLen > 0) {
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d053      	beq.n	8001266 <USART_IRQHandling+0x216>
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if (pUSARTHandle->USART_config.USART_WordLength == USART_WORDLEN_9BITS) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d12f      	bne.n	8001226 <USART_IRQHandling+0x1d6>
					//We are going to receive 9bit data in a frame
					//Now, check are we using USART_ParityControl control or not
					if (pUSARTHandle->USART_config.USART_ParityControl == USART_PARITY_DISABLE) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b9b      	ldrb	r3, [r3, #14]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d119      	bne.n	8001202 <USART_IRQHandling+0x1b2>
						//No parity is used. so, all 9bits will be of user data
						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*)pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR& (uint16_t) 0x01FF);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011de:	b292      	uxth	r2, r2
 80011e0:	801a      	strh	r2, [r3, #0]
						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	621a      	str	r2, [r3, #32]
						pUSARTHandle->pRxBuffer++;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	621a      	str	r2, [r3, #32]
						//Implement the code to decrement the length
						pUSARTHandle->RxLen-=2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	1e9a      	subs	r2, r3, #2
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
 8001200:	e031      	b.n	8001266 <USART_IRQHandling+0x216>
					} else {
						//Parity is used. so, 8bits will be of user data and 1 bit is parity
						*pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR & (uint8_t) 0xFF);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	701a      	strb	r2, [r3, #0]
						//Now increment the pRxBuffer
						pUSARTHandle->pRxBuffer++;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	621a      	str	r2, [r3, #32]
						//Implement the code to decrement the length
						pUSARTHandle->RxLen-=1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	1e5a      	subs	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
 8001224:	e01f      	b.n	8001266 <USART_IRQHandling+0x216>
					}
				} else {
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if (pUSARTHandle->USART_config.USART_ParityControl == USART_PARITY_DISABLE) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7b9b      	ldrb	r3, [r3, #14]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <USART_IRQHandling+0x1ee>
						//No parity is used , so all 8bits will be of user data
						//read 8 bits from DR
						*pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR & (uint8_t) 0xFF);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e009      	b.n	8001252 <USART_IRQHandling+0x202>
					}
					else {
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity
						//read only 7 bits , hence mask the DR with 0X7F
						*pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR& (uint8_t) 0x7F);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	701a      	strb	r2, [r3, #0]
					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	621a      	str	r2, [r3, #32]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen-=1;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
				}

			}		//if of >0

			if (!pUSARTHandle->RxLen) {
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10e      	bne.n	800128c <USART_IRQHandling+0x23c>
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RXNEIE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0220 	bic.w	r2, r2, #32
 800127c:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	745a      	strb	r2, [r3, #17]
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8001284:	2101      	movs	r1, #1
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff f890 	bl	80003ac <USART_ApplicationEventCallback>
	}

	/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5
	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_CTS);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001296:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a2:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSIE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	60bb      	str	r3, [r7, #8]

	if (temp1 && temp2) {
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00e      	beq.n	80012d4 <USART_IRQHandling+0x284>
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <USART_IRQHandling+0x284>
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_CTS);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012ca:	601a      	str	r2, [r3, #0]
		//this interrupt is because of cts
		USART_ApplicationEventCallback( pUSARTHandle, USART_FLAG_CTS);
 80012cc:	2100      	movs	r1, #0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f86c 	bl	80003ac <USART_ApplicationEventCallback>
	}

	/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_IDLEIE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2) {
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00f      	beq.n	8001312 <USART_IRQHandling+0x2c2>
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00c      	beq.n	8001312 <USART_IRQHandling+0x2c2>
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_IDLE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	f023 0310 	bic.w	r3, r3, #16
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	617b      	str	r3, [r7, #20]
		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle, USART_FLAG_IDLE);
 800130a:	2110      	movs	r1, #16
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff f84d 	bl	80003ac <USART_ApplicationEventCallback>
	}

	/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f003 0305 	and.w	r3, r3, #5
 8001328:	613b      	str	r3, [r7, #16]

	if (temp1 && temp2) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <USART_IRQHandling+0x2ee>
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <USART_IRQHandling+0x2ee>
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle, USART_FLAG_ORE);
 8001336:	2108      	movs	r1, #8
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff f837 	bl	80003ac <USART_ApplicationEventCallback>
	/*************************Check for Error Flag ********************************************/

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.
	temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_EIE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	613b      	str	r3, [r7, #16]

	if (temp2) {
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d01e      	beq.n	800138e <USART_IRQHandling+0x33e>
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	617b      	str	r3, [r7, #20]
		if (temp1 & (1 << USART_SR_FE)) {
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <USART_IRQHandling+0x31a>
			/*
			 This bit is set by hardware when a de-synchronization, excessive noise or a break character
			 is detected. It is cleared by a software sequence (an read to the USART_SR register
			 followed by a read to the USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle, USART_FLAG_FE);
 8001362:	2102      	movs	r1, #2
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff f821 	bl	80003ac <USART_ApplicationEventCallback>
		}

		if (temp1 & (1 << USART_SR_NF)) {
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <USART_IRQHandling+0x32c>
			/*
			 This bit is set by hardware when noise is detected on a received frame. It is cleared by a
			 software sequence (an read to the USART_SR register followed by a read to the
			 USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle, USART_FLAG_NF);
 8001374:	2104      	movs	r1, #4
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff f818 	bl	80003ac <USART_ApplicationEventCallback>
		}

		if (temp1 & (1 << USART_SR_ORE)) {
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <USART_IRQHandling+0x33e>
			USART_ApplicationEventCallback(pUSARTHandle, USART_FLAG_ORE);
 8001386:	2108      	movs	r1, #8
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff f80f 	bl	80003ac <USART_ApplicationEventCallback>
		}
	}

}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <__libc_init_array>:
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	4d0d      	ldr	r5, [pc, #52]	; (80013d0 <__libc_init_array+0x38>)
 800139c:	4c0d      	ldr	r4, [pc, #52]	; (80013d4 <__libc_init_array+0x3c>)
 800139e:	1b64      	subs	r4, r4, r5
 80013a0:	10a4      	asrs	r4, r4, #2
 80013a2:	2600      	movs	r6, #0
 80013a4:	42a6      	cmp	r6, r4
 80013a6:	d109      	bne.n	80013bc <__libc_init_array+0x24>
 80013a8:	4d0b      	ldr	r5, [pc, #44]	; (80013d8 <__libc_init_array+0x40>)
 80013aa:	4c0c      	ldr	r4, [pc, #48]	; (80013dc <__libc_init_array+0x44>)
 80013ac:	f000 f818 	bl	80013e0 <_init>
 80013b0:	1b64      	subs	r4, r4, r5
 80013b2:	10a4      	asrs	r4, r4, #2
 80013b4:	2600      	movs	r6, #0
 80013b6:	42a6      	cmp	r6, r4
 80013b8:	d105      	bne.n	80013c6 <__libc_init_array+0x2e>
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
 80013bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c0:	4798      	blx	r3
 80013c2:	3601      	adds	r6, #1
 80013c4:	e7ee      	b.n	80013a4 <__libc_init_array+0xc>
 80013c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013ca:	4798      	blx	r3
 80013cc:	3601      	adds	r6, #1
 80013ce:	e7f2      	b.n	80013b6 <__libc_init_array+0x1e>
 80013d0:	0800140c 	.word	0x0800140c
 80013d4:	0800140c 	.word	0x0800140c
 80013d8:	0800140c 	.word	0x0800140c
 80013dc:	08001410 	.word	0x08001410

080013e0 <_init>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr

080013ec <_fini>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr
